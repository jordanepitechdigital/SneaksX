## üìã Contexte du projet
Cr√©er une application web e-commerce moderne et √©pur√©e appel√©e **"SneakX"** - une boutique de sneakers premium avec une interface utilisateur fluide et des animations subtiles. L'application doit √™tre construite en React/Next.js avec Supabase comme backend.

## üéØ PLAN DE D√âVELOPPEMENT EN 3 √âTAPES OBLIGATOIRES

### **üîß √âTAPE 1 : BACKEND & DATA PIPELINE (PRIORIT√â ABSOLUE)**
**Objectif** : Construire une base solide avec donn√©es r√©elles
**Livrable** : Backend fonctionnel avec donn√©es synchronis√©es

**Actions prioritaires :**
- ‚úÖ Rechercher et analyser compl√®tement l'API Kicks.dev
- ‚úÖ Cr√©er le sch√©ma Supabase optimis√© (tables, relations, RLS)
- ‚úÖ D√©velopper le pipeline de scraping : Kicks.dev ‚Üí Supabase
- ‚úÖ Impl√©menter l'authentification et gestion des r√¥les
- ‚úÖ Synchroniser 100+ produits avec max 2 images par produit
- ‚úÖ Cr√©er les fonctions/triggers Supabase pour la logique m√©tier
- ‚úÖ Tester la robustesse du pipeline (gestion d'erreurs, retry, cache)

**Crit√®res de validation :**
- Base de donn√©es peupl√©e avec vraies donn√©es produits
- Authentification fonctionnelle (User/Vendor/Admin)
- Pipeline de synchronisation stable et document√©

---

### **üîÑ √âTAPE 2 : API ROUTES & INT√âGRATION FRONTEND-BACKEND**
**Objectif** : Connecter le frontend aux donn√©es backend
**Livrable** : Application fonctionnelle avec donn√©es r√©elles

**Actions prioritaires :**
- ‚úÖ Cr√©er les services API c√¥t√© frontend (TypeScript)
- ‚úÖ Impl√©menter les hooks React Query pour le cache et state management
- ‚úÖ D√©velopper les routes principales : catalogue, d√©tail produit, panier, commandes
- ‚úÖ G√©rer l'authentification c√¥t√© client (login/logout/sessions)
- ‚úÖ Impl√©menter la logique e-commerce (panier, checkout, gestion stock)
- ‚úÖ Cr√©er le panel administrateur avec CRUD complet
- ‚úÖ Tester toutes les interactions frontend ‚Üî backend

**Crit√®res de validation :**
- Toutes les fonctionnalit√©s e-commerce op√©rationnelles
- Panel admin fonctionnel pour tous les r√¥les
- Synchronisation temps r√©el entre frontend et Supabase

---

### **üé® √âTAPE 3 : POLISH VISUEL & UX (DERNI√àRE PRIORIT√â)**
**Objectif** : Am√©liorer l'exp√©rience utilisateur et l'esth√©tique
**Livrable** : Interface premium et animations fluides

**Actions prioritaires :**
- ‚úÖ Impl√©menter le design system (couleurs noir/blanc, typographie)
- ‚úÖ Ajouter les animations Framer Motion (transitions, hover effects)
- ‚úÖ Optimiser le responsive design (mobile-first)
- ‚úÖ Am√©liorer l'UX (loading states, notifications, micro-interactions)
- ‚úÖ Peaufiner les composants UI (boutons, formulaires, modals)
- ‚úÖ Tests utilisateur et ajustements finaux

**Crit√®res de validation :**
- Interface moderne et professionnelle
- Animations fluides et performantes
- Exp√©rience utilisateur optimale sur tous devices

---

## ‚ö†Ô∏è **R√àGLE D'OR : NE PAS PASSER √Ä L'√âTAPE SUIVANTE**
**Chaque √©tape DOIT √™tre 100% fonctionnelle avant de passer √† la suivante.**
**Le backend est la fondation - sans donn√©es r√©elles, le frontend ne sert √† rien.**

## üîå Source de Donn√©es - API Kicks.dev

### **‚ö†Ô∏è √âTAPE OBLIGATOIRE - Recherche de documentation**
**AVANT DE COMMENCER LE D√âVELOPPEMENT, vous DEVEZ :**
1. **Rechercher et analyser** la documentation compl√®te de l'API Kicks.dev via web search
2. **Identifier** tous les endpoints disponibles, leurs param√®tres et formats de r√©ponse
3. **Comprendre** la structure des donn√©es, l'authentification et les limites de rate
4. **Documenter** les m√©thodes de scraping et d'int√©gration avec Supabase

### **Configuration API**
- **URL de base** : `https://kicks.dev/api`
- **Cl√© API** : `KICKS-97EF-725F-A605-58232DC70EED`
- **Documentation** : https://kicks.dev/api-keys (√Ä ANALYSER EN PREMIER)

### **Gestion des Images**
- **Limite d'images** : Maximum 1-2 images par paire de sneakers
- **S√©lection** : Prendre uniquement les 2 premi√®res images de qualit√© de chaque produit
- **Optimisation** : Ignorer les 36+ images disponibles par d√©faut dans l'API
- **Format** : Privil√©gier les images haute r√©solution pour la galerie produit

### **Processus de Data Pipeline obligatoire**
```javascript
// √âTAPES OBLIGATOIRES √Ä IMPL√âMENTER :

// 1. RECHERCHE ET ANALYSE DE LA DOCUMENTATION API
// - Utiliser web search pour r√©cup√©rer la doc compl√®te de Kicks.dev
// - Identifier tous les endpoints et leurs param√®tres
// - Comprendre l'authentification et les limites

// 2. SCRAPING INTELLIGENT DES DONN√âES
const dataScrapingPipeline = {
  // R√©cup√©rer les donn√©es depuis Kicks.dev
  async fetchFromKicksAPI() {
    // Implementation bas√©e sur la doc trouv√©e
  },
  
  // Transformer et nettoyer les donn√©es
  async transformData(rawData) {
    return rawData.map(product => ({
      ...product,
      images: product.images.slice(0, 2), // Limiter √† 2 images
      // Autres transformations n√©cessaires
    }));
  },
  
  // Synchroniser avec Supabase
  async syncToSupabase(transformedData) {
    // Upsert des produits en base
    // Gestion des relations (marques, cat√©gories, etc.)
    // Mise √† jour du stock
  }
};

// 3. STRAT√âGIE DE SYNCHRONISATION
const syncStrategy = {
  // Synchronisation initiale (100+ produits minimum)
  initialSync: 'Import complet des donn√©es au premier d√©marrage',
  // Synchronisation p√©riodique
  periodicSync: 'Mise √† jour toutes les 6 heures',
  // Synchronisation temps r√©el
  realtimeSync: 'Webhook ou polling pour nouveaux produits'
};
```

## üé® Design System

### **Palette de couleurs**
- **Couleurs principales** : Noir (#000000) et Blanc (#FFFFFF) uniquement
- **Nuances autoris√©es** : Gris tr√®s fonc√© (#111111, #1a1a1a) et gris tr√®s clair (#f8f8f8, #f5f5f5)
- **Accents** : Utiliser les contrastes noir/blanc pour les call-to-actions

### **Typographie**
- **Police principale** : Inter ou Poppins (moderne et lisible)
- **Police secondaire** : Roboto Mono pour les √©l√©ments techniques (prix, r√©f√©rences)
- **Hi√©rarchie** : Utiliser les poids de police (300, 400, 500, 600, 700) pour cr√©er la hi√©rarchie

### **Style g√©n√©ral**
- Design **minimaliste et √©pur√©**
- Espacement g√©n√©reux entre les √©l√©ments
- Bordures fines et subtiles
- Ombres douces pour la profondeur
- Interface **flat design** avec des √©l√©ments g√©om√©triques simples

## ‚ú® Animations et UX

### **Animations au chargement**
- **Fade-in progressif** pour les √©l√©ments qui apparaissent
- **Slide-up** pour les cartes produits
- **Skeleton loading** pendant le chargement des donn√©es API
- **Transitions fluides** entre les pages (300-400ms)

### **Interactions**
- **Hover effects** subtils sur les boutons et cartes
- **Smooth scrolling** sur toute l'application
- **Loading spinners** √©l√©gants pendant les appels API
- **Toast notifications** pour les feedbacks utilisateur

### **Micro-animations**
- **Bounce** l√©ger sur les boutons cliqu√©s
- **Scale effect** sur les images produits au hover
- **Progress bars** anim√©es pour les √©tapes de commande

## üì± Pages et Fonctionnalit√©s

### **1. Pages Publiques**

#### **Page d'accueil (`/`)**
- Header avec logo SneakX et navigation
- Hero section avec slider des derni√®res nouveaut√©s (via API Kicks.dev)
- Grid des marques partenaires
- Section "Produits populaires" (8 produits max depuis l'API)
- Footer avec liens utiles

#### **Catalogue produits (`/products`)**
- **Filtres lat√©raux** bas√©s sur les donn√©es API :
  - Par marque (r√©cup√©r√©es dynamiquement via l'API)
  - Par genre (homme, femme, unisexe)
  - Par taille (selon disponibilit√© API)
  - Par prix (bas√© sur les prix API)
- **Tri** : Prix, Nouveaut√©s, Popularit√©
- **Grid responsive** des produits (3-4 colonnes desktop, 2 mobile)
- **Pagination** ou infinite scroll avec chargement API
- **Compteur** de r√©sultats

#### **D√©tail produit (`/products/[id]`)**
- **Galerie d'images** limit√©e √† 2 images maximum (via API)
- **Informations produit** : nom, marque, description, prix (donn√©es API)
- **S√©lecteur de taille** avec disponibilit√© du stock
- **Bouton "Ajouter au panier"** avec animation
- **Suggestions** de produits similaires (API)

#### **Panier (`/cart`)**
- Liste des articles avec quantit√©s
- **Calcul en temps r√©el** du total
- **Boutons** : modifier quantit√©, supprimer article
- **R√©sum√©** avec sous-total, livraison, total
- **Bouton** vers checkout

#### **Commande (`/checkout`)**
- **√âtapes** : Adresse ‚Üí Paiement ‚Üí Confirmation
- **Progress bar** des √©tapes
- **Formulaires** d'adresse de livraison/facturation
- **R√©capitulatif** de commande
- **Page de confirmation** apr√®s paiement

### **2. Pages Utilisateur Connect√©**

#### **Connexion/Inscription (`/auth`)**
- **Formulaires** login/register avec validation
- **Authentification sociale** (Google, optionnel)
- **Reset password** avec email

#### **Profil utilisateur (`/profile`)**
- **Informations personnelles** modifiables
- **Historique des commandes** avec statuts
- **Adresses** sauvegard√©es
- **Gestion mot de passe**

### **3. Panel Administrateur (`/admin`)**

#### **Dashboard admin (`/admin/dashboard`)**
- **M√©triques** : ventes, commandes, utilisateurs
- **Graphiques** de performance
- **Derni√®res commandes**
- **Alertes** stock faible
- **Synchronisation** avec l'API Kicks.dev

#### **Gestion utilisateurs (`/admin/users`)** *(Admin uniquement)*
- **Liste** de tous les utilisateurs
- **Filtres** par r√¥le (User, Vendor, Admin)
- **Actions** : Cr√©er, Modifier, Supprimer, Changer r√¥le
- **Recherche** par nom/email

#### **Gestion vendeurs (`/admin/vendors`)** *(Admin uniquement)*
- **Liste** des vendeurs
- **Cr√©er** nouveau compte vendeur
- **Statistiques** par vendeur

#### **Gestion produits (`/admin/products`)** *(Admin + Vendor)*
- **Synchronisation** avec l'API Kicks.dev
- **Import automatique** des nouveaux produits
- **Gestion du stock** par taille
- **Limitation automatique** des images (max 2 par produit)
- **Preview** et validation des donn√©es API

#### **Gestion commandes (`/admin/orders`)** *(Admin + Vendor)*
- **Liste** de toutes les commandes avec filtres
- **D√©tail** de chaque commande
- **Changement de statut** (En attente ‚Üí Confirm√© ‚Üí Exp√©di√© ‚Üí Livr√©)
- **Impression** de factures/bons de livraison

#### **Gestion stock (`/admin/stock`)** *(Admin + Vendor)*
- **Vue globale** du stock par produit/taille
- **Alertes** stock faible
- **Ajustements** de stock
- **Synchronisation** avec les donn√©es API
- **Historique** des mouvements

### **4. Composants Communs**

#### **Navigation**
- **Header** fixe avec logo, menu, panier, compte utilisateur
- **Menu mobile** avec sidebar
- **Breadcrumbs** sur les pages internes

#### **√âl√©ments UI**
- **Cards produits** avec image (max 2 depuis API), nom, prix, marque
- **Boutons** avec √©tats (normal, hover, disabled, loading)
- **Modals** pour confirmations et d√©tails rapides
- **Formulaires** avec validation en temps r√©el

## üîê Gestion des R√¥les et Permissions

### **Utilisateur (User)**
- Parcourir les produits (donn√©es API)
- G√©rer son panier et ses commandes
- Modifier son profil

### **Vendeur (Vendor)**
- Toutes les permissions User +
- Synchroniser les donn√©es avec l'API Kicks.dev
- G√©rer les stocks locaux
- Voir et traiter les commandes

### **Administrateur (Admin)**
- Toutes les permissions Vendor +
- G√©rer les utilisateurs et vendeurs
- Configuration de l'API Kicks.dev
- Acc√®s aux statistiques globales
- Gestion compl√®te de la plateforme

## üõ†Ô∏è Stack Technique Recommand√©e

### **Frontend**
- **React 18** avec hooks et Context API
- **Next.js 14** pour le routing et SSR
- **Tailwind CSS** pour le styling
- **Framer Motion** pour les animations
- **React Hook Form** pour les formulaires
- **React Query/TanStack Query** pour le cache API et state management

### **Backend & Base de donn√©es**
- **Supabase** (PostgreSQL, Auth, Storage)
- **Row Level Security** pour la s√©curit√©
- **API Kicks.dev** pour les donn√©es produits
- **Syst√®me de cache** pour optimiser les appels API

### **Outils compl√©mentaires**
- **TypeScript** pour le typage
- **Zustand** ou **Context API** pour le state global
- **React Hot Toast** pour les notifications
- **Lucide React** pour les ic√¥nes
- **Axios** ou **Fetch API** pour les appels HTTP

## üìã Fonctionnalit√©s Sp√©cifiques √† Impl√©menter

### **üîç √âTAPE 1 : Recherche et Documentation API (OBLIGATOIRE)**
```javascript
// AVANT TOUT D√âVELOPPEMENT :
// 1. Utiliser web search pour analyser https://kicks.dev/api-keys
// 2. Identifier TOUS les endpoints disponibles
// 3. Comprendre la structure des r√©ponses JSON
// 4. Documenter les param√®tres d'authentification
// 5. Identifier les limites de rate et contraintes

// Exemple de recherche √† effectuer :
// - "Kicks.dev API documentation endpoints"
// - "Kicks.dev API authentication headers"
// - "Kicks.dev API rate limits"
// - "Kicks.dev API response structure sneakers"
```

### **üîÑ √âTAPE 2 : Pipeline de donn√©es Kicks.dev ‚Üí Supabase**
```javascript
// Service complet de synchronisation des donn√©es
class KicksDataPipeline {
  static apiKey = 'KICKS-97EF-725F-A605-58232DC70EED';
  static baseURL = 'https://kicks.dev/api'; // √Ä v√©rifier avec la doc
  static maxImages = 2;

  // 1. R√©cup√©ration depuis Kicks.dev (bas√© sur la doc trouv√©e)
  static async fetchAllSneakers() {
    // Implementation √† adapter selon la vraie documentation
    const response = await fetch(`${this.baseURL}/sneakers`, {
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json'
      }
    });
    return await response.json();
  }

  // 2. Transformation des donn√©es
  static transformKicksDataForSupabase(kicksData) {
    return kicksData.map(sneaker => ({
      // Mapping des champs selon la structure Supabase
      external_id: sneaker.id,
      name: sneaker.title || sneaker.name,
      brand: sneaker.brand,
      price: sneaker.retail_price || sneaker.price,
      description: sneaker.description,
      images: sneaker.images ? sneaker.images.slice(0, 2) : [],
      sizes: this.extractSizes(sneaker),
      category: this.determineCategory(sneaker),
      // Autres mappings selon la structure r√©elle
    }));
  }

  // 3. Synchronisation avec Supabase
  static async syncToSupabase(transformedData) {
    const supabase = createClient();
    
    for (const product of transformedData) {
      // Upsert du produit
      const { data, error } = await supabase
        .from('products')
        .upsert({
          external_id: product.external_id,
          name: product.name,
          brand: product.brand,
          price: product.price,
          description: product.description,
          updated_at: new Date().toISOString()
        }, {
          onConflict: 'external_id'
        });

      // G√©rer les images s√©par√©ment
      if (product.images.length > 0) {
        await this.syncProductImages(data.id, product.images);
      }

      // G√©rer les tailles et stocks
      if (product.sizes.length > 0) {
        await this.syncProductStock(data.id, product.sizes);
      }
    }
  }

  // 4. Gestion des images (max 2)
  static async syncProductImages(productId, images) {
    const supabase = createClient();
    const limitedImages = images.slice(0, 2);
    
    for (const [index, imageUrl] of limitedImages.entries()) {
      await supabase.from('product_images').upsert({
        product_id: productId,
        image_url: imageUrl,
        is_primary: index === 0,
        order_index: index
      });
    }
  }

  // 5. Gestion du stock par taille
  static async syncProductStock(productId, sizes) {
    const supabase = createClient();
    
    for (const size of sizes) {
      await supabase.from('product_stock').upsert({
        product_id: productId,
        size: size.value,
        quantity: size.stock || Math.floor(Math.random() * 20), // Stock simul√©
        available: size.available !== false
      });
    }
  }
}

### **Syst√®me de filtres avanc√©**
```javascript
// Filtres bas√©s sur les donn√©es API
const filters = {
  brands: [], // R√©cup√©r√©es dynamiquement via API
  genders: ['homme', 'femme', 'unisex'],
  sizes: [], // Selon disponibilit√© API
  priceRange: [0, 1000] // Ajust√© selon les prix API
}
```

### **Gestion du panier**
- **Persistance** dans localStorage et base de donn√©es
- **Synchronisation** entre onglets
- **Calcul automatique** des totaux

### **Cache et Performance**
- **Cache API** avec React Query pour √©viter les appels r√©p√©t√©s
- **Optimisation images** avec lazy loading
- **Pagination intelligente** pour les gros catalogues

### **Syst√®me de notifications**
- **Toast** pour les actions (ajout panier, erreurs, succ√®s)
- **Badges** de notification sur le panier
- **Alertes** de synchronisation API dans l'admin

### **Responsive Design**
- **Mobile-first** approach
- **Breakpoints** : mobile (< 768px), tablet (768-1024px), desktop (> 1024px)
- **Navigation mobile** avec menu hamburger

## üéØ Objectifs UX Prioritaires

1. **Performance** : Chargement rapide des donn√©es API et images optimis√©es
2. **Accessibilit√©** : Navigation clavier, contraste, lecteurs d'√©cran
3. **Intuitivit√©** : Interface simple et logique
4. **Fluidit√©** : Transitions douces et chargements API transparents
5. **Modernit√©** : Design contemporain et √©pur√©

## üîÑ Synchronisation et Donn√©es

### **Strat√©gie de synchronisation**
- **Synchronisation automatique** des nouveaux produits toutes les 6h
- **Cache intelligent** pour r√©duire les appels API
- **Fallback** en cas d'indisponibilit√© de l'API
- **Logs de synchronisation** pour le debugging

### **Gestion des erreurs API**
- **Retry automatique** en cas d'√©chec
- **Messages d'erreur** explicites pour les utilisateurs
- **Mode d√©grad√©** si API indisponible
- **Monitoring** des performances API

## üìù Notes d'impl√©mentation

### **üîç RECHERCHE PR√âALABLE OBLIGATOIRE**
- **√âTAPE 1** : Utiliser web search pour analyser compl√®tement l'API Kicks.dev
- **√âTAPE 2** : Documenter TOUS les endpoints, param√®tres et formats de r√©ponse
- **√âTAPE 3** : Comprendre l'authentification et les contraintes techniques

### **üîÑ PIPELINE DE DONN√âES**
- Impl√©menter le scraping complet des donn√©es Kicks.dev (100+ produits minimum)
- Transformer et mapper les donn√©es pour Supabase
- Limiter strictement √† 2 images maximum par produit
- G√©rer la synchronisation bidirectionnelle Kicks.dev ‚Üî Supabase

### **üìä BASE DE DONN√âES SUPABASE**
- Cr√©er les tables adapt√©es aux donn√©es Kicks.dev
- Impl√©menter les relations (produits, images, stock, commandes)
- G√©rer les contraintes et index pour les performances
- Pr√©voir la synchronisation en temps r√©el

### **‚ö° PERFORMANCE ET ROBUSTESSE**
- Impl√©menter un syst√®me de cache robuste pour optimiser les performances
- Pr√©voir les cas d'erreur et les √©tats de chargement API
- Optimiser les images r√©cup√©r√©es (WebP, lazy loading, compression)
- Tester la gestion des timeouts et erreurs r√©seau
- G√©rer les conflits de synchronisation et la d√©duplication

## üöÄ Rendu Attendu

G√©n√©rer une application web compl√®te et fonctionnelle avec :

### **üìã PR√âREQUIS OBLIGATOIRES**
1. **Rechercher et analyser** la documentation compl√®te de l'API Kicks.dev
2. **Impl√©menter** le pipeline de donn√©es complet : Kicks.dev ‚Üí Transformation ‚Üí Supabase
3. **Scrapper** et synchroniser 100+ produits minimum avec max 2 images/produit

### **üéØ LIVRABLE FINAL**
- **Interface utilisateur moderne** en noir et blanc avec animations fluides
- **Int√©gration compl√®te** avec l'API Kicks.dev (donn√©es scrap√©es et synchronis√©es)
- **Base de donn√©es Supabase** optimis√©e avec toutes les relations
- **Syst√®me de r√¥les** complet (User/Vendor/Admin) avec permissions
- **Fonctionnalit√©s e-commerce** compl√®tes avec vraies donn√©es produits
- **Panel d'administration** avanc√© avec monitoring de synchronisation
- **Pipeline de donn√©es** robuste avec gestion d'erreurs compl√®te
- **Documentation technique** d√©taill√©e du scraping et de l'int√©gration
- **Code TypeScript** propre et bien structur√© avec tests unitaires

## üîë Informations API et Pipeline

### **Configuration Initiale**
- **Cl√© API** : `KICKS-97EF-725F-A605-58232DC70EED`
- **Base URL** : `https://kicks.dev/api` (√Ä V√âRIFIER avec la documentation)
- **Documentation** : https://kicks.dev/api-keys (√Ä ANALYSER EN PREMIER)

### **Pipeline de Donn√©es Obligatoire**
1. **Research Phase** : Web search de la documentation API compl√®te
2. **Scraping Phase** : R√©cup√©ration de 100+ produits avec leurs donn√©es
3. **Transform Phase** : Nettoyage et adaptation des donn√©es pour Supabase  
4. **Load Phase** : Import et synchronisation avec la base de donn√©es
5. **Sync Phase** : Maintien de la coh√©rence des donn√©es en continu

### **Contraintes Techniques**
- **Limite images** : 2 maximum par paire de sneakers
- **Cache intelligent** : Obligatoire pour optimiser les performances
- **Gestion d'erreurs** : Retry, fallback, monitoring des APIs
- **Timeout recommand√©** : 10 secondes pour les appels API
- **Rate limiting** : Respecter les limites de l'API Kicks.dev
