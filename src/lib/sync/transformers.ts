import type { KicksDBProduct, KicksDBBrand } from '@/types/kicksdb';
import type { DBProduct, DBBrand, DBProductImage, DBProductMarket, DBProductSize } from '@/types/database';

/**
 * Transform KicksDB brand to database format
 */
export function transformBrand(kicksDBBrand: KicksDBBrand): Partial<DBBrand> {
  return {
    name: kicksDBBrand.name,
    slug: kicksDBBrand.slug,
    logo_url: kicksDBBrand.logo || null,
    kicksdb_name: kicksDBBrand.name,
    kicksdb_product_count: kicksDBBrand.productCount,
    kicksdb_last_sync: new Date().toISOString(),
    is_active: true,
    updated_at: new Date().toISOString(),
  };
}

/**
 * Transform KicksDB product to database format
 */
export function transformProduct(
  kicksDBProduct: KicksDBProduct,
  brandId: string,
  categoryId?: string
): Partial<DBProduct> {
  const marketplace = kicksDBProduct.marketplace === 'stockx' ? 'stockx' :
                     kicksDBProduct.marketplace === 'goat' ? 'goat' : 'internal';

  return {
    kicksdb_id: kicksDBProduct.id,
    name: kicksDBProduct.name,
    slug: kicksDBProduct.slug,
    description: kicksDBProduct.description || null,
    brand_id: brandId,
    category_id: categoryId || null,
    model: extractModel(kicksDBProduct.name),
    colorway: kicksDBProduct.colorway,
    release_date: kicksDBProduct.releaseDate ? new Date(kicksDBProduct.releaseDate).toISOString().split('T')[0] : null,
    retail_price: kicksDBProduct.retailPrice,
    current_price: kicksDBProduct.market?.lastSale || kicksDBProduct.retailPrice,
    sku: kicksDBProduct.sku,
    gender: normalizeGender(kicksDBProduct.gender),
    platform: marketplace as any,
    external_id: kicksDBProduct.id,
    external_slug: kicksDBProduct.slug,
    external_url: null, // KicksDB doesn't provide direct URLs
    last_sync_at: new Date().toISOString(),
    sync_status: 'completed' as any,
    price_last_updated: new Date().toISOString(),
    market_data: transformMarketData(kicksDBProduct.market),
    is_active: true,
    is_featured: false,
    is_monitored: false,
    updated_at: new Date().toISOString(),
  };
}

/**
 * Transform market data to JSONB format
 */
export function transformMarketData(market: KicksDBProduct['market']): Record<string, any> {
  if (!market) return {};

  return {
    lowestAsk: market.lowestAsk,
    highestBid: market.highestBid,
    lastSale: market.lastSale,
    changeValue: market.changeValue,
    changePercentage: market.changePercentage,
    volatility: market.volatility,
    deadstockSold: market.deadstockSold,
    annualHigh: market.annualHigh,
    annualLow: market.annualLow,
    updatedAt: new Date().toISOString(),
  };
}

/**
 * Transform product images with 2-image limit
 */
export function transformProductImages(
  kicksDBProduct: KicksDBProduct,
  productId: string
): DBProductImage[] {
  const images = kicksDBProduct.images || [];

  // Enforce 2-image limit as per requirements
  const limitedImages = images.slice(0, 2);

  return limitedImages.map((imageUrl, index) => ({
    id: '', // Will be generated by database
    product_id: productId,
    image_url: imageUrl,
    alt_text: `${kicksDBProduct.name} - Image ${index + 1}`,
    is_primary: index === 0,
    sort_order: index,
    created_at: new Date().toISOString(),
  }));
}

/**
 * Transform product sizes
 */
export function transformProductSizes(
  kicksDBProduct: KicksDBProduct,
  productId: string
): DBProductSize[] {
  const sizes = kicksDBProduct.sizes || [];

  return sizes.map(size => ({
    id: '', // Will be generated by database
    product_id: productId,
    size: size.size,
    price: size.price,
    currency: size.currency || 'USD',
    is_available: size.price > 0,
    last_updated: new Date().toISOString(),
    created_at: new Date().toISOString(),
  }));
}

/**
 * Transform market data to historical record
 */
export function transformProductMarketData(
  kicksDBProduct: KicksDBProduct,
  productId: string
): Partial<DBProductMarket> {
  const market = kicksDBProduct.market;
  if (!market) return {};

  return {
    product_id: productId,
    lowest_ask: market.lowestAsk,
    highest_bid: market.highestBid,
    last_sale: market.lastSale,
    change_value: market.changeValue,
    change_percentage: market.changePercentage,
    volatility: market.volatility,
    deadstock_sold: market.deadstockSold,
    annual_high: market.annualHigh,
    annual_low: market.annualLow,
    recorded_at: new Date().toISOString(),
    created_at: new Date().toISOString(),
  };
}

/**
 * Helper functions
 */

/**
 * Extract model from product name
 */
function extractModel(productName: string): string {
  // Simple extraction logic - take first few words before colorway indicators
  const commonColorwayWords = ['black', 'white', 'red', 'blue', 'green', 'yellow', 'orange', 'purple', 'pink', 'grey', 'gray'];
  const words = productName.toLowerCase().split(' ');

  let modelWords: string[] = [];
  for (const word of words) {
    if (commonColorwayWords.some(color => word.includes(color))) {
      break;
    }
    modelWords.push(word);
  }

  return modelWords.slice(0, 3).join(' ') || productName.split(' ').slice(0, 2).join(' ');
}

/**
 * Normalize gender values
 */
function normalizeGender(gender: string): string {
  if (!gender) return 'unisex';

  const normalized = gender.toLowerCase();
  if (normalized.includes('men') && !normalized.includes('women')) return 'men';
  if (normalized.includes('women') || normalized.includes('wmns')) return 'women';
  if (normalized.includes('kid') || normalized.includes('child')) return 'kids';
  if (normalized.includes('infant') || normalized.includes('baby')) return 'infant';

  return 'unisex';
}

/**
 * Validate transformed data
 */
export function validateTransformedProduct(product: Partial<DBProduct>): { isValid: boolean; errors: string[] } {
  const errors: string[] = [];

  if (!product.name || product.name.trim().length === 0) {
    errors.push('Product name is required');
  }

  if (!product.slug || product.slug.trim().length === 0) {
    errors.push('Product slug is required');
  }

  if (!product.brand_id) {
    errors.push('Brand ID is required');
  }

  if (!product.kicksdb_id) {
    errors.push('KicksDB ID is required');
  }

  if (product.retail_price !== null && product.retail_price !== undefined && product.retail_price < 0) {
    errors.push('Retail price cannot be negative');
  }

  if (product.current_price !== null && product.current_price !== undefined && product.current_price < 0) {
    errors.push('Current price cannot be negative');
  }

  return {
    isValid: errors.length === 0,
    errors,
  };
}

/**
 * Validate transformed brand
 */
export function validateTransformedBrand(brand: Partial<DBBrand>): { isValid: boolean; errors: string[] } {
  const errors: string[] = [];

  if (!brand.name || brand.name.trim().length === 0) {
    errors.push('Brand name is required');
  }

  if (!brand.slug || brand.slug.trim().length === 0) {
    errors.push('Brand slug is required');
  }

  if (!brand.kicksdb_name) {
    errors.push('KicksDB name is required');
  }

  return {
    isValid: errors.length === 0,
    errors,
  };
}

/**
 * Create slug from name
 */
export function createSlug(name: string): string {
  return name
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/(^-|-$)/g, '');
}

/**
 * Clean and validate image URLs
 */
export function validateImageUrls(urls: string[]): string[] {
  return urls
    .filter(url => url && url.trim().length > 0)
    .filter(url => {
      try {
        new URL(url);
        return true;
      } catch {
        return false;
      }
    })
    .slice(0, 2); // Enforce 2-image limit
}